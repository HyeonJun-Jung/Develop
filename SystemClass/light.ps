////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTextures[5];
SamplerState SampleType;
cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float  specularPower;
    float4 specularColor;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    
    /*
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;
    float4 specular;

    float4 difColor;
    float4 spcColor;
    float4 NorColor;
    float4 glossColor;
    float4 emissiveColor;

    difColor = shaderTextures[0].Sample(SampleType, input.tex);
    spcColor = shaderTextures[1].Sample(SampleType, input.tex);
    NorColor = shaderTextures[2].Sample(SampleType, input.tex);
    glossColor = shaderTextures[3].Sample(SampleType, input.tex);
    emissiveColor = shaderTextures[4].Sample(SampleType, input.tex);

    if((glossColor.r == 0.0) && (glossColor.g == 0.0) && (glossColor.b == 0.0))
    {
        color = float4(0.0f, 0.0f, 0.0f, 1.0f);

        // 모든 픽셀의 기본 출력 색상을 Diffuse map을 통해 설정합니다.
        color = difColor;

         // 계산을 위해 방향을 반전시킵니다.
        lightDir = -lightDirection;

        // 이 픽셀의 빛의 양을 계산합니다.
        lightIntensity = saturate(dot(input.normal, lightDir));

        // 빛의 강도와 결합된 확산 색을 기준으로 픽셀의 최종 확산 색을 결정합니다.
        if(lightIntensity > 0.0f)
        {  
           // 확산 색과 광 강도의 양에 따라 최종 확산 색을 결정합니다.
           color += (difColor * lightIntensity);
       
           // 최종 빛의 색상을 채웁니다.
           color = saturate(color);

           // 빛의 강도, 법선 벡터 및 빛의 방향에 따라 반사 벡터를 계산합니다.
           float3 reflection = normalize(2 * lightIntensity * input.normal - lightDir); 

           // 반사 벡터, 시선 방향 및 반사출력을 기준으로 반사 조명의 양을 결정합니다.
           specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
        }
 
        // 텍스처 픽셀과 최종 확산 색을 곱하여 최종 픽셀 색상의 결과를 얻습니다.
        // color = color * difColor;

        // 출력 색상의 마지막에 반사 컴포넌트를 추가합니다.
        color = saturate(color + spcColor + );
    }
    else
    {
        color = glossColor;
    }

    */

    // 이 텍스처 좌표 위치에서 샘플러를 사용하여 텍스처에서 픽셀 색상을 샘플링합니다.
	float4 textureColor = shaderTextures[0].Sample(SampleType, input.tex);

	// 모든 픽셀의 기본 출력 색상을 주변 광원 값으로 설정합니다.
    float4 color = ambientColor;

	// specular color를 초기화한다.
	float4 specular = float4 (0.0f, 0.0f, 0.0f, 0.0f);

	// 계산을 위해 빛 방향을 반전시킵니다.
    float3 lightDir = -lightDirection;

	// 이 픽셀의 빛의 양을 계산합니다.
    float lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
    {
        // 확산 색과 광 강도의 양에 따라 최종 확산 색을 결정합니다.
        color += (diffuseColor * lightIntensity);
    
    	// 최종 빛의 색상을 채 웁니다.
    	color = saturate(color);

		// 빛의 강도, 법선 벡터 및 빛의 방향에 따라 반사 벡터를 계산합니다.
		float3 reflection = normalize(2 * lightIntensity * input.normal - lightDir); 

		// 반사 벡터, 시선 방향 및 반사 출력을 기준으로 반사 조명의 양을 결정합니다.
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}

	// 텍스처 픽셀과 최종 확산 색을 곱하여 최종 픽셀 색상 결과를 얻습니다.
    color = color * textureColor;

	// 출력 색상의 마지막에 반사 컴포넌트를 추가합니다.
	color = saturate(color + specular);

    return color;
    
}